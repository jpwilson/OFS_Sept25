/**
 * Extract location markers from HTML content generated by the rich text editor
 * @param {string} htmlContent - The HTML content from the editor
 * @returns {Array} Array of location objects with id, locationName, latitude, longitude, timestamp, source
 */
export function extractLocationsFromHTML(htmlContent) {
  if (!htmlContent) return [];

  // Create a temporary DOM element to parse HTML
  const parser = new DOMParser();
  const doc = parser.parseFromString(htmlContent, 'text/html');

  // Find all location markers
  const locationElements = doc.querySelectorAll('[data-location-marker]');

  const locations = [];
  locationElements.forEach((element, index) => {
    const locationName = element.getAttribute('data-location-name');
    const latitude = element.getAttribute('data-latitude');
    const longitude = element.getAttribute('data-longitude');
    const timestamp = element.getAttribute('data-timestamp');
    const placeId = element.getAttribute('data-place-id');

    if (locationName && latitude && longitude) {
      locations.push({
        id: `marker-${index}-${Date.now()}`, // Unique ID for selection
        locationName,
        name: locationName, // Alias for compatibility
        latitude: parseFloat(latitude),
        longitude: parseFloat(longitude),
        timestamp: timestamp || null,
        placeId: placeId || null,
        source: 'manual' // Manual pin from editor
      });
    }
  });

  return locations;
}

/**
 * Extract GPS data from images in HTML content
 * This is a placeholder for future implementation when GPS extraction is added
 * @param {string} htmlContent - The HTML content from the editor
 * @returns {Promise<Array>} Promise that resolves to array of location objects from images
 */
export async function extractLocationsFromImages(htmlContent) {
  // TODO: Implement GPS extraction from images
  // For now, return empty array
  // In the future, this will:
  // 1. Find all <img> tags in the content
  // 2. Call backend API to extract GPS data
  // 3. Return locations with source: 'image'
  return [];
}

/**
 * Get all locations from an event (manual markers + image GPS)
 * @param {string} htmlContent - The HTML content from the editor
 * @returns {Promise<Array>} Promise that resolves to combined array of all locations
 */
export async function getAllLocations(htmlContent) {
  const manualLocations = extractLocationsFromHTML(htmlContent);
  const imageLocations = await extractLocationsFromImages(htmlContent);

  return [...manualLocations, ...imageLocations];
}

/**
 * Check if the number of locations exceeds the maximum allowed
 * @param {string} htmlContent - The HTML content from the editor
 * @param {number} maxLocations - Maximum number of locations allowed (default: 20)
 * @returns {Promise<Object>} Object with { isValid, count, locations }
 */
export async function validateLocationCount(htmlContent, maxLocations = 20) {
  const locations = await getAllLocations(htmlContent);
  const count = locations.length;

  return {
    isValid: count <= maxLocations,
    count,
    locations,
    maxLocations
  };
}
